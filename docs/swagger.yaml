basePath: /
definitions:
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  models.PasswordUpdateRequest:
    properties:
      new_password:
        example: new_password123
        type: string
      old_password:
        example: old_password123
        type: string
    type: object
  models.User:
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is an e-commerce server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: E-Commerce API
  version: "1.0"
paths:
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a user
      tags:
      - User
  /users/close-account:
    delete:
      description: Close the account of the logged-in user
      responses:
        "204":
          description: Account closed successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to close account
          schema:
            type: string
      summary: Close user account
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logged in successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid email or password
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login a user
      tags:
      - User
  /users/profile:
    get:
      description: Get the profile of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update the profile of the logged-in user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update user profile
      tags:
      - User
  /users/profile/password:
    put:
      consumes:
      - application/json
      description: Update the password of the logged-in user
      parameters:
      - description: Password Update Request
        in: body
        name: passwordData
        required: true
        schema:
          $ref: '#/definitions/models.PasswordUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update user password
      tags:
      - User
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, email, and role
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
